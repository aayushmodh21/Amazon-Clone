{"ast":null,"code":"import _slicedToArray from\"/Users/Apple/Desktop/aayush-amazon/amazon-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect}from'react';import'./App.css';import{BrowserRouter as Router,Switch,Route}from'react-router-dom';import Header from'./Header';import Home from'./Home';import Checkout from'./Checkout';import Login from'./Login';import{useStateValue}from'./StateProvider';import{auth2}from'./firebase';import firebase from'firebase';function App(){var _useStateValue=useStateValue(),_useStateValue2=_slicedToArray(_useStateValue,2),user=_useStateValue2[0].user,dispatch=_useStateValue2[1];// useEffect hook <<<<<<<< POWERFUL\n//use of code which runs based on a given condition\n//want to make a listener which is going to be listening every time to if user signedIn or signedOut\nuseEffect(function(){var unsubscribe=firebase.auth().onAuthStateChanged(function(authUser){if(authUser){//user is logged in\ndispatch({type:\"SET_USER\",user:authUser});}else{//user is logged out\ndispatch({type:\"SET_USER\",user:null});}});return function(){//Any cleanup operations go in here\nunsubscribe();};},[]);console.log('User is -> ',user);return/*#__PURE__*/React.createElement(Router,null,/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/checkout\"},/*#__PURE__*/React.createElement(Header,null),/*#__PURE__*/React.createElement(Checkout,null)),/*#__PURE__*/React.createElement(Route,{path:\"/login\"},/*#__PURE__*/React.createElement(Login,null)),/*#__PURE__*/React.createElement(Route,{path:\"/\"},/*#__PURE__*/React.createElement(Header,null),/*#__PURE__*/React.createElement(Home,null)))));}export default App;","map":{"version":3,"sources":["/Users/Apple/Desktop/aayush-amazon/amazon-clone/src/App.js"],"names":["React","useEffect","BrowserRouter","Router","Switch","Route","Header","Home","Checkout","Login","useStateValue","auth2","firebase","App","user","dispatch","unsubscribe","auth","onAuthStateChanged","authUser","type","console","log"],"mappings":"sKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAO,WAAP,CACA,OAASC,aAAa,GAAIC,CAAAA,MAA1B,CAAkCC,MAAlC,CAA0CC,KAA1C,KAAuD,kBAAvD,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,KAAT,KAAsB,YAAtB,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CAGA,QAASC,CAAAA,GAAT,EAAe,oBAEgBH,aAAa,EAF7B,kDAEJI,IAFI,oBAEJA,IAFI,CAEIC,QAFJ,oBAIb;AACA;AACA;AAEAd,SAAS,CAAC,UAAM,CAEd,GAAMe,CAAAA,WAAW,CAAGJ,QAAQ,CAACK,IAAT,GAAgBC,kBAAhB,CAAmC,SAACC,QAAD,CAAc,CACnE,GAAGA,QAAH,CAAY,CACV;AACAJ,QAAQ,CAAC,CACPK,IAAI,CAAE,UADC,CAEPN,IAAI,CAAEK,QAFC,CAAD,CAAR,CAID,CAND,IAOI,CACF;AACAJ,QAAQ,CAAC,CACPK,IAAI,CAAE,UADC,CAEPN,IAAI,CAAE,IAFC,CAAD,CAAR,CAID,CAEF,CAhBmB,CAApB,CAkBA,MAAO,WAAM,CACX;AACAE,WAAW,GACZ,CAHD,CAKD,CAzBQ,CAyBN,EAzBM,CAAT,CA2BFK,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA0BR,IAA1B,EAEE,mBACE,oBAAC,MAAD,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,MAAD,mBAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,WAAZ,eACE,oBAAC,MAAD,MADF,cAEE,oBAAC,QAAD,MAFF,CAFF,cAOE,oBAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,eACE,oBAAC,KAAD,MADF,CAPF,cAYE,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,eACE,oBAAC,MAAD,MADF,cAEE,oBAAC,IAAD,MAFF,CAZF,CADF,CADF,CADF,CAwBD,CAED,cAAeD,CAAAA,GAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Header from './Header';\nimport Home from './Home';\nimport Checkout from './Checkout';\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\nimport { auth2 } from './firebase';\nimport firebase from 'firebase'\n\n\nfunction App() {\n\n  const [{ user }, dispatch] = useStateValue();\n\n  // useEffect hook <<<<<<<< POWERFUL\n  //use of code which runs based on a given condition\n  //want to make a listener which is going to be listening every time to if user signedIn or signedOut\n\n  useEffect(() => {\n\n    const unsubscribe = firebase.auth().onAuthStateChanged((authUser) => {\n      if(authUser){\n        //user is logged in\n        dispatch({\n          type: \"SET_USER\",\n          user: authUser\n        })\n      }\n      else{\n        //user is logged out\n        dispatch({\n          type: \"SET_USER\",\n          user: null\n        })\n      }\n\n    })\n\n    return () => {\n      //Any cleanup operations go in here\n      unsubscribe();\n    }\n    \n  }, [])\n\nconsole.log('User is -> ',user)\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <Switch>\n\n          <Route path=\"/checkout\">\n            <Header />\n            <Checkout />\n          </Route>\n\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n\n          {/* default Route */}\n          <Route path=\"/\">\n            <Header />\n            <Home />\n          </Route>\n\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}