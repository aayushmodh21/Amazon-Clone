{"ast":null,"code":"//initialState: how's they look like in the beginning\n//Reducer: how we play with a data-layer\n//   reducer plays very important role in pushing content to thr data-layer\n//   pulling data from data-layer is easy task\nexport const initialState = {\n  basket: [],\n  user: null\n};\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"SET_USER\":\n      return { ...state,\n        user: action.user\n      };\n\n    case \"ADD_TO_BASKET\":\n      //logic for adding item to basket\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      //logic for removing item from basket\n      //we cloned the basket\n      let newBasket = [...state.basket]; //whether product exists or not\n\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n\n      if (index >= 0) {\n        //index exists in basket, remove it...\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Cant remove product (id: ${action.id}) as it's not preent in basket`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/Apple/Documents/Learning_Projects/Projects/React_Node/aayush-amazon/amazon-clone/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","newBasket","index","findIndex","basketItem","id","splice","warn"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB;AAKP,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC1BA,MAD0B,aAC1BA,MAD0B,uBAC1BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAAQC,IAAR,KAAiBA,IAAI,CAACC,KAAL,GAAaF,MAA7C,EAAqD,CAArD,CADG;;AAIP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAEA,UAAOA,MAAM,CAACG,IAAd;AACI,SAAK,UAAL;AACI,aAAO,EACH,GAAGJ,KADA;AAEHP,QAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFV,OAAP;;AAKJ,SAAK,eAAL;AACI;AACA,aAAO,EACH,GAAGO,KADA;AAEHR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAFL,OAAP;;AAKJ,SAAK,oBAAL;AACI;AAEA;AACA,UAAIQ,SAAS,GAAG,CAAC,GAAGL,KAAK,CAACR,MAAV,CAAhB,CAJJ,CAMI;;AACA,YAAMc,KAAK,GAAGN,KAAK,CAACR,MAAN,CAAae,SAAb,CAAwBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBR,MAAM,CAACQ,EAAhE,CAAd;;AAEA,UAAGH,KAAK,IAAE,CAAV,EAAY;AACR;AACAD,QAAAA,SAAS,CAACK,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACH,OAHD,MAII;AACAJ,QAAAA,OAAO,CAACS,IAAR,CAAc,4BAA2BV,MAAM,CAACQ,EAAG,gCAAnD;AACH;;AAED,aAAO,EACH,GAAGT,KADA;AAEHR,QAAAA,MAAM,EAAEa;AAFL,OAAP;;AAKJ;AACI,aAAOL,KAAP;AArCR;AAuCH,CA3CD;;AA6CA,eAAeD,OAAf","sourcesContent":["//initialState: how's they look like in the beginning\n//Reducer: how we play with a data-layer\n//   reducer plays very important role in pushing content to thr data-layer\n//   pulling data from data-layer is easy task\n\nexport const initialState = {\n    basket: [],\n    user: null\n};\n\nexport const getBasketTotal = (basket) => \n    basket?.reduce((amount,item) => item.price + amount, 0);\n\n\nconst reducer = (state, action) => {\n\n    console.log(action);\n\n    switch(action.type){\n        case \"SET_USER\":\n            return {\n                ...state,\n                user: action.user\n            }\n\n        case \"ADD_TO_BASKET\":\n            //logic for adding item to basket\n            return {\n                ...state,\n                basket: [...state.basket, action.item] \n            }\n\n        case \"REMOVE_FROM_BASKET\":\n            //logic for removing item from basket\n\n            //we cloned the basket\n            let newBasket = [...state.basket];\n\n            //whether product exists or not\n            const index = state.basket.findIndex((basketItem) => basketItem.id === action.id);\n            \n            if(index>=0){\n                //index exists in basket, remove it...\n                newBasket.splice(index, 1);\n            }\n            else{\n                console.warn(`Cant remove product (id: ${action.id}) as it's not preent in basket`);\n            }\n\n            return {\n                ...state, \n                basket: newBasket \n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n\n"]},"metadata":{},"sourceType":"module"}